services:
  db:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: db
      POSTGRES_PASSWORD: db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: db
      POSTGRES_PASSWORD: db
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      FRONTEND_URL: http://localhost:3000
    depends_on:
      db:
        condition: service_healthy    
    volumes:
      - ./backend:/app
      - /app/__pycache__
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    networks:
      - app-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - REACT_APP_API_URL=http://backend:8000  # Internal calls
      - NEXT_PUBLIC_API_URL=https://yourdomain.com  # OAuth calls
      - NEXT_PUBLIC_OAUTH_URL=https://yourdomain.com  # OAuth calls 
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_INTERVAL=1000
      - NODE_ENV=development
    stdin_open: true
    tty: true
    depends_on:
      backend:
        condition: service_healthy

  pgmanager:
    image: dpage/pgadmin4
    container_name: pgmanager
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: